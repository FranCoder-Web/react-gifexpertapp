{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","prevState","indexOf","toUpperCase","className","type","value","onChange","target","placeholder","GifGridItem","title","url","category","src","alt","getGifs","a","encodeURI","fetch","res","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","color","height","width","key","GifExpertApp","defaultCategories","categories","categorie","ReactDOM","render","document","getElementById"],"mappings":"kPAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACbC,mBAAS,IADI,mBAC1CC,EAD0C,KAC9BC,EAD8B,KAuBjD,OACC,0BAAMC,SAlBc,SAACC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAId,OAHsBA,EAAUC,QAC/BR,EAAWS,cAAcJ,SAEH,EACfE,EAED,CAAEP,EAAWS,eAAnB,mBAAqCF,OAGvCN,EAAc,OAKd,2BACCS,UAAU,SACVC,KAAK,OACLC,MAAOZ,EACPa,SA1BuB,SAACV,GAC1BF,EAAcE,EAAEW,OAAOF,QA0BrBG,YAAY,qBC9BHC,EAAc,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SACzC,OACC,yBAAKT,UAAU,+CACd,yBAAKU,IAAKF,EAAKG,IAAKJ,IACpB,2BACGA,GAA0B,KAAjBA,EAAMZ,OAEdY,EAAMR,cADNU,EAASV,iB,uBCTHa,EAAO,uCAAG,WAAOH,GAAP,uBAAAI,EAAA,6DAChBL,EADgB,iDACgCM,UACrDL,GAFqB,+DAKJM,MAAMP,GALF,cAKhBQ,EALgB,gBAMCA,EAAIC,OANL,uBAMdC,EANc,EAMdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACtB,MAAO,CACNC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAKa,EAAIE,OAAOC,iBAAiBhB,QAXb,kBAefW,GAfe,4CAAH,sD,gBCMPM,EAAU,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACfpB,mBAAS,CAClC6B,KAAM,GACNQ,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAezC,OATAC,qBAAU,WACTjB,EAAQH,GAAUqB,MAAK,SAACC,GACvBH,EAAS,CACRV,KAAMa,EACNL,SAAS,SAGT,CAACjB,IAEGkB,EDX2BK,CAAavB,GAAjCc,EAD0B,EAChCL,KAAcQ,EADkB,EAClBA,QAEtB,OACC,oCACC,wBAAI1B,UAAU,YAAYS,GACzBiB,GACA,kBAAC,IAAD,CACCzB,KAAK,YACLgC,MAAM,UACNC,OAAQ,IACRC,MAAO,MAGT,yBAAKnC,UAAU,aACbuB,EAAOH,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,eAAae,IAAKf,EAAIC,GAAIb,SAAUA,GAAcY,UEjB1CgB,EAAe,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,IACvBjD,mBAASiD,GADc,mBACpDC,EADoD,KACxCnD,EADwC,KAG3D,OACC,yBAAKY,UAAU,aACd,wBAAIA,UAAU,SAAd,kBACA,kBAAC,EAAD,CAAaZ,cAAeA,IAC5B,6BAEA,4BACwB,IAAtBmD,EAAW3C,OACX,yBAAKI,UAAU,aACd,wBAAIA,UAAU,6EAAd,mBAGA,kBAAC,IAAD,CACCC,KAAK,eACLgC,MAAM,UACNC,OAAQ,IACRC,MAAO,OAITI,EAAWnB,KAAI,SAACoB,GAAD,OACd,kBAAC,EAAD,CAASJ,IAAKI,EAAW/B,SAAU+B,UCxBzCC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.00676720.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\tconst [inputValue, setInputValue] = useState('')\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value)\r\n\t}\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault()\r\n\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\tsetCategories((prevState) => {\r\n\t\t\t\tlet repeatCategorie = prevState.indexOf(\r\n\t\t\t\t\tinputValue.toUpperCase().trim()\r\n\t\t\t\t)\r\n\t\t\t\tif (repeatCategorie >= 0) {\r\n\t\t\t\t\treturn prevState\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn [inputValue.toUpperCase(), ...prevState]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetInputValue('')\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input\r\n\t\t\t\tclassName='search'\r\n\t\t\t\ttype='text'\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\tplaceholder='SEARCH GIFS...'\r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const GifGridItem = ({ title, url, category }) => {\r\n\treturn (\r\n\t\t<div className='card animate__animated animate__fadeInDown '>\r\n\t\t\t<img src={url} alt={title} />\r\n\t\t\t<p>\r\n\t\t\t\t{!title || title.trim() === ''\r\n\t\t\t\t\t? category.toUpperCase()\r\n\t\t\t\t\t: title.toUpperCase()}\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\turl: PropTypes.string.isRequired,\r\n}\r\n","export const getGifs = async (category) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n\t\tcategory\r\n\t)}&limit=12&api_key=hKmYNp48dGCYk4BlyjttJiOBMozCxomv`\r\n\r\n\tconst res = await fetch(url)\r\n\tconst { data } = await res.json()\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images.downsized_medium.url,\r\n\t\t}\r\n\t})\r\n\r\n\treturn gifs\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\tconst { data: images, loading } = useFetchGifs(category)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2 className='category'>{category}</h2>\r\n\t\t\t{loading && (\r\n\t\t\t\t<Loader\r\n\t\t\t\t\ttype='ThreeDots'\r\n\t\t\t\t\tcolor='#1e272e'\r\n\t\t\t\t\theight={120}\r\n\t\t\t\t\twidth={120}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t\t<div className='card-grid'>\r\n\t\t\t\t{images.map((img) => (\r\n\t\t\t\t\t<GifGridItem key={img.id} category={category} {...img} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nGifGrid.propTypes = {\r\n\tcategory: PropTypes.string.isRequired,\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t})\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then((imgs) => {\r\n\t\t\tsetState({\r\n\t\t\t\tdata: imgs,\r\n\t\t\t\tloading: false,\r\n\t\t\t})\r\n\t\t})\r\n\t}, [category])\r\n\r\n\treturn state\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nexport const GifExpertApp = ({ defaultCategories = [] }) => {\r\n\tconst [categories, setCategories] = useState(defaultCategories)\r\n\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t<h1 className='title'>Gif Expert App</h1>\r\n\t\t\t<AddCategory setCategories={setCategories} />\r\n\t\t\t<hr />\r\n\r\n\t\t\t<ol>\r\n\t\t\t\t{categories.length === 0 ? (\r\n\t\t\t\t\t<div className='container'>\r\n\t\t\t\t\t\t<h2 className='subtitle animate__animated animate__pulse animate__infinite animate__slow'>\r\n\t\t\t\t\t\t\tFind your gifs!\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t<Loader\r\n\t\t\t\t\t\t\ttype='BallTriangle'\r\n\t\t\t\t\t\t\tcolor='#1e272e'\r\n\t\t\t\t\t\t\theight={200}\r\n\t\t\t\t\t\t\twidth={200}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\tcategories.map((categorie) => (\r\n\t\t\t\t\t\t<GifGrid key={categorie} category={categorie} />\r\n\t\t\t\t\t))\r\n\t\t\t\t)}\r\n\t\t\t</ol>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { GifExpertApp } from './GifExpertApp'\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'))\n"],"sourceRoot":""}